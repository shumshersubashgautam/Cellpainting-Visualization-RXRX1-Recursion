# -*- coding: utf-8 -*-
"""CellMapping_Tangram_Pytorch_Gene_Expression_Data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/shumshersubashgautam/TangramPyTorch-mapping-single-cell/blob/main/CellMapping_Tangram_Pytorch_Gene_Expression_Data.ipynb
"""

# !pip install scanpy==1.9.3 anndata==0.9.1 umap numpy==1.22.4 scipy==1.10.1 pandas==1.5.3 scikit-learn==1.2.2 statsmodels==0.13.5 python-igraph==0.10.4 pynndescent==0.5.10 squidpy==1.1.2

# !pip install tangram-sc

cd cell

# !python setup.py install



# !pip install scArches

# Commented out IPython magic to ensure Python compatibility.
import scanpy as sc
import pandas as pd
import sys
import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from bcc.utils import plot_well_type_positions
# %matplotlib inline

# !pip install mvtcr
# !pip install multigrate

!git clone https://github.com/recursionpharma/rxrx1-utils
sys.path.append('rxrx1-utils')
import rxrx.io as rio #Using the method from Recursion (https://github.com/recursionpharma/rxrx1-utils/tree/trunk/notebooks),

CHANNELS = [1,2,3,4,5,6]
def visualize(data, experiment, plate, well, site, channels=CHANNELS, ax=None):
    img_tensor = rio.load_site(data, experiment, plate, well, site)
    img = rio.convert_tensor_to_rgb(img_tensor)

    if ax is None:
        fig = plt.figure()
        ax = fig.add_subplot(111)
    ax.imshow(img)
    ax.set_axis_off()
    return img

def visualize_cells_with_sirna(dataset, experiment,  well, site, sirna, plate=0, channels=CHANNELS):
    well_size = 10
    title_fs = 25

    fig = plt.figure(figsize=(5*well_size, 3*well_size))
    experiment = experiment
    sirna = sirna
    well = well
    site = site

    if plate == 0:
        for plate in range(1, 5):
            ax = fig.add_subplot(2, 4, plate)
            visualize(dataset, experiment, plate, well, site=site, channels=channels, ax=ax)
            ax.set_title(f'{experiment} Plate{plate}, siRNA {sirna} , well {well}, site {site}', fontdict={'fontsize': title_fs})

    else:
        plate = plate
        y = rio.load_site_as_rgb(dataset, experiment, plate, well, site)
        plt.figure(figsize=(3,3))
        plt.axis('off')
        plt.title(f'{experiment} Plate{plate}, siRNA {sirna} , well {well}, site {site}', fontdict={'fontsize': 7})
        _ = plt.imshow(y)

!wget https://storage.googleapis.com/rxrx/rxrx1/rxrx1-metadata.zip

!unzip /content/cell/rxrx1-metadata.zip

!wget https://storage.googleapis.com/rxrx/rxrx1/rxrx1-dl-embeddings.zip

!unzip /content/cell/rxrx1-dl-embeddings.zip

meta_file = "/content/cell/rxrx1/metadata.csv"
data_file = "/content/cell/rxrx1/embeddings.csv"
if not os.path.exists(meta_file):
    raise FileNotFoundError("Please download the metadata from https://www.rxrx.ai/rxrx1 and put the file metadata.csv in the directory data/rxrx1")
if not os.path.exists(meta_file):
    raise FileNotFoundError("Please download the embeddings from https://www.rxrx.ai/rxrx1 and put the file embeddings.csv in the directory data/rxrx1")
metadata_df = pd.read_csv(meta_file)
embeddings_df = pd.read_csv(data_file)

f = plot_well_type_positions(metadata_df[metadata_df.experiment=="HEPG2-08"], "well", "well_type", "plate", 16, 24)
f = plot_well_type_positions(metadata_df[metadata_df.experiment=="U2OS-01"], "well", "well_type", "plate", 16, 24)

f = plot_well_type_positions(metadata_df[(metadata_df.experiment=="HEPG2-08") & (metadata_df.well_type=="positive_control")], "well", "sirna", "plate", 16, 24, 2)
f = plot_well_type_positions(metadata_df[(metadata_df.experiment=="U2OS-01") & (metadata_df.well_type=="positive_control")], "well", "sirna", "plate", 16, 24,2)

#Celltype HEPG2: site 1
visualize_cells_with_sirna(dataset = 'test', experiment = 'HEPG2-08', well = 'B02', site = 1, sirna = 'EMPTY') # negative control
visualize_cells_with_sirna(dataset = 'test', experiment = 'HEPG2-08', well = 'F07', site = 1, sirna= 's18582') # positive control
visualize_cells_with_sirna(dataset = 'test', experiment = 'HEPG2-08', plate = 4, well = 'N23', site = 1, sirna= 's18583') #treatment

#Celltype HEPG2: site 2
visualize_cells_with_sirna(dataset = 'test', experiment = 'HEPG2-08', well = 'B02', site = 2, sirna = 'EMPTY') # same negative control location in all plates across all experiments
visualize_cells_with_sirna(dataset = 'test', experiment = 'HEPG2-08', well = 'F07', site = 2, sirna= 's18582') # one of the 30 wells with positive control
visualize_cells_with_sirna(dataset = 'test', experiment = 'HEPG2-08', plate = 4, well = 'N23', site = 2, sirna= 's18583') # random other well with treatment

meta_file = "/content/cell/rxrx1/metadata.csv"
data_file = "/content/cell/rxrx1/embeddings.csv"
adata = sc.read_csv(data_file)
meta = pd.read_csv(meta_file, index_col = 0)
# change the order of the rows in the meta data to match the order in the embeddings
meta = meta.reindex(pd.read_csv(data_file, index_col = 0).index)
adata.obs = meta
adata.obs['well_row'], adata.obs['well_column'] = adata.obs['well'].str[:1], adata.obs['well'].str[1:]
print(adata)
meta.head(n=3)

sc.pp.neighbors(adata, n_neighbors=15, use_rep = "X")
sc.tl.umap(adata)

sc.pl.umap(adata, color="well_type", palette={"positive_control": "grey", "treatment": "grey", "negative_control": "blue"})
sc.pl.umap(adata, color="well_type", palette={"negative_control": "grey", "treatment": "grey", "positive_control": "blue"})

#Whole dataset:
sc.pl.umap(adata, color="cell_type", title = "Whole Dataset")
#positive controls:
poscontrols = adata[adata.obs["well_type"] == "positive_control"]
sc.pp.neighbors(poscontrols, n_neighbors=15, use_rep = "X")
sc.tl.umap(poscontrols)
sc.pl.umap(poscontrols, color=["cell_type"], title = "Positive Controls")
#negative controls:
negcontrols = adata[adata.obs["well_type"] == "negative_control"]
sc.pp.neighbors(negcontrols, n_neighbors=15, use_rep = "X")
sc.tl.umap(negcontrols)
sc.pl.umap(negcontrols, color=["cell_type"], title = "Negative Control")

#positive control siRNA:
poscontrol_sirna = adata[(adata.obs["sirna"] == "s12279")  & (adata.obs["cell_type"] == "RPE")]
sc.pp.neighbors(poscontrol_sirna, n_neighbors=15, use_rep = "X")
sc.tl.umap(poscontrol_sirna)
sc.pl.umap(poscontrol_sirna, color=["well_column", "well_row"], title = ["RPE, Positive control siRNA, well column", "RPE, Positive control siRNA,well row"])
#negative control:
#RPE
negcontrol_rpe= adata[(adata.obs["sirna"] == "EMPTY")  & (adata.obs["cell_type"] == "RPE")]
sc.pp.neighbors(negcontrol_rpe, n_neighbors=15, use_rep = "X")
sc.tl.umap(negcontrol_rpe)
sc.pl.umap(negcontrol_rpe, color=["well_column", "well_row"], title = ["RPE, Negative control, well column", "RPE, Negative control, well row"])
#HUVEC
negcontrol_huvec = adata[(adata.obs["sirna"] == "EMPTY")  & (adata.obs["cell_type"] == "HUVEC")]
sc.pp.neighbors(negcontrol_huvec, n_neighbors=15, use_rep = "X")
sc.tl.umap(negcontrol_huvec)
sc.pl.umap(negcontrol_huvec, color=["well_column", "well_row"], title = ["HUVEC, Negative control, well column","HUVEC, Negative control, well row" ])
#HEPG2
negcontrol_hepg2 = adata[(adata.obs["sirna"] == "EMPTY")  & (adata.obs["cell_type"] == "HEPG2")]
sc.pp.neighbors(negcontrol_hepg2, n_neighbors=15, use_rep = "X")
sc.tl.umap(negcontrol_hepg2)
sc.pl.umap(negcontrol_hepg2, color=["well_column", "well_row"], title = ["HEPG2, Negative control, well column","HEPG2, Negative control, well row"])
#U2OS
negcontrol_u2os = adata[(adata.obs["sirna"] == "EMPTY")  & (adata.obs["cell_type"] == "U2OS")]
sc.pp.neighbors(negcontrol_u2os, n_neighbors=15, use_rep = "X")
sc.tl.umap(negcontrol_u2os)
sc.pl.umap(negcontrol_u2os, color=["well_column", "well_row"], title = ["U2OS, Negative control, well column", "U2OS, Negative control, well row"])

#positive control siRNA from above:
sc.pl.umap(poscontrol_sirna, color=["plate"], title = ["RPE, Positive control siRNA, plate"])
#negative control:
#RPE
sc.pl.umap(negcontrol_rpe, color=["plate"], title = ["RPE, Negative control,plate"])
#HUVEC
sc.pl.umap(negcontrol_huvec, color=["plate"], title = ["HUVEC, Negative control, plate" ])
#HEPG2
sc.pl.umap(negcontrol_hepg2, color=["plate"], title = ["HEPG2, Negative control, plate"])
#U2OS
sc.pl.umap(negcontrol_u2os, color=["plate"], title = ["U2OS, Negative control, plate"])

# all well types
adata_rpe = adata[adata.obs["cell_type"] == "RPE"]
sc.pp.neighbors(adata_rpe, n_neighbors=15, use_rep = "X")
sc.tl.umap(adata_rpe)
sc.pl.umap(adata_rpe, color=["experiment"], title = "RPE, all well types, experiment")
#positive controls:
#RPE
poscontrols_rpe = poscontrols[poscontrols.obs["cell_type"] == "RPE"]
sc.pp.neighbors(poscontrols_rpe, n_neighbors=15, use_rep = "X")
sc.tl.umap(poscontrols_rpe)
sc.pl.umap(poscontrols_rpe, color=["experiment", "sirna"], title = ["RPE, Positive controls, experiment", "RPE, Positive controls, siRNA"])
#HEPG2
poscontrols_hepg2 = poscontrols[poscontrols.obs["cell_type"] == "HEPG2"]
sc.pp.neighbors(poscontrols_hepg2, n_neighbors=15, use_rep = "X")
sc.tl.umap(poscontrols_hepg2)
sc.pl.umap(poscontrols_hepg2, color=["experiment", "sirna"], title = ["HEPG2, Positive controls, experiment", "HEPG2, Positive controls, siRNA"])
#HUVEC
poscontrols_huvec = poscontrols[poscontrols.obs["cell_type"] == "HUVEC"]
sc.pp.neighbors(poscontrols_huvec, n_neighbors=15, use_rep = "X")
sc.tl.umap(poscontrols_huvec)
sc.pl.umap(poscontrols_huvec, color=["experiment", "sirna"], title = ["HUVEC, Positive controls, experiment", "HUVEC, Positive controls, siRNA"])
#U2OS
poscontrols_u2os = poscontrols[poscontrols.obs["cell_type"] == "U2OS"]
sc.pp.neighbors(poscontrols_u2os, n_neighbors=15, use_rep = "X")
sc.tl.umap(poscontrols_u2os)
sc.pl.umap(poscontrols_u2os, color=["experiment", "sirna"], title = ["U2OS, Positive controls, experiment", "U2OS, Positive controls, siRNA"])

#negative controls:
sc.pl.umap(negcontrol_rpe, color=["experiment"], title = ["RPE, Negative control, experiment"])
sc.pl.umap(negcontrol_hepg2, color=["experiment"], title = ["HEPG2, Negative control, experiment"])
sc.pl.umap(negcontrol_huvec, color=["experiment"], title = ["HUVEC, Negative control, experiment"])
sc.pl.umap(negcontrol_u2os, color=["experiment"], title = ["U2OS, Negative control, experiment"])

poscontrol_sirna = adata[(adata.obs["sirna"] == "s502431")  & (adata.obs["cell_type"] == "HUVEC")]
sc.pp.neighbors(poscontrol_sirna, n_neighbors=15, use_rep = "X")
sc.tl.umap(poscontrol_sirna)
sc.pl.umap(poscontrol_sirna, color=["experiment"], title = ["HUVEC, Positive control siRNA, experiment"])

